<Window x:Class="FamilyExplorer.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"     
        xmlns:self="clr-namespace:FamilyExplorer"  
        xmlns:converters="clr-namespace:FamilyExplorer.XamlConverters"        
        Title="{Binding Title}" WindowState="Maximized" x:Name="FamilyExplorerWindow"
        Icon="./Resources/FEX.ico"
    MouseLeftButtonDown="Window_MouseLeftButtonDown" MouseDown="Window_MouseDown">

    <Window.Resources>

        <Style TargetType="{x:Type ListBox}" x:Key="PersonListBoxStyle">
            <Style.Resources>
                <!-- Style used if item is selected and listbox has keyboard focus -->
                <Style x:Key="NoFocusVisualStyle" TargetType="Control">
                    <Setter Property="BorderBrush" Value="Transparent" />
                </Style>
                <!-- Apply this style -->
                <Style x:Key="{x:Type ListBoxItem}" TargetType="ListBoxItem">
                    <Setter Property="FocusVisualStyle" Value="{StaticResource NoFocusVisualStyle}" />
                </Style>
                <!-- Color used if item is selected and listbox has focus -->
                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="Transparent"/>
                <!-- Color used if item is selected and listbox does not have focus -->
                <SolidColorBrush  x:Key="{x:Static SystemColors.ControlBrushKey}" Color="Transparent"/>
                <!-- Font color used if item is selected and listbox has focus -->
                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="Black" />
            </Style.Resources>
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListBox}">
                        <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="1" SnapsToDevicePixels="true">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsGrouping" Value="true">
                                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="{x:Type ListBox}" x:Key="RelationshipListBoxStyle">
            <Style.Resources>
                <!-- Style used if item is selected and listbox has keyboard focus -->
                <Style x:Key="NoFocusVisualStyle" TargetType="Control">
                    <Setter Property="BorderBrush" Value="{x:Null}" />
                    <Setter Property="Background" Value="{x:Null}"/>
                </Style>
                <!-- Apply this style -->
                <Style x:Key="{x:Type ListBoxItem}" TargetType="ListBoxItem">
                    <Setter Property="FocusVisualStyle" Value="{StaticResource NoFocusVisualStyle}" />
                    <Setter Property="BorderBrush" Value="{x:Null}" />
                    <Setter Property="Background" Value="{x:Null}"/>
                </Style>
                <!-- Color used if item is selected and listbox has focus -->
                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="Transparent"/>
                <!-- Color used if item is selected and listbox does not have focus -->
                <SolidColorBrush  x:Key="{x:Static SystemColors.ControlBrushKey}" Color="Transparent"/>
                <!-- Font color used if item is selected and listbox has focus -->
                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="Black" />
            </Style.Resources>
            <Setter Property="Background" Value="{x:Null}"/>
            <!--<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>-->
            <Setter Property="BorderBrush" Value="{x:Null}"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Foreground" Value="{x:Null}"/>
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <!--<Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListBox}">
                        <Border x:Name="Bd" BorderBrush="{x:Null}" Background="{x:Null}" Padding="1" SnapsToDevicePixels="true">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" Value="{x:Null}"/>
                                <Setter Property="Background" TargetName="Bd" Value="{x:Null}"/>
                                -->
            <!--<Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>-->
            <!--
                            </Trigger>
                            <Trigger Property="IsGrouping" Value="true">
                                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>-->
        </Style>

        <DataTemplate x:Key="PersonItem">
            <Border x:Name="BorderSelection" CornerRadius="10" BorderThickness="2" BorderBrush="Transparent" Background="Transparent" 
                    Width="{Binding Width}" Height="{Binding Height}">
                <Border x:Name="BorderMain"  BorderBrush="{Binding BorderBrush}"
                        Background="{Binding Background}" CornerRadius="10" BorderThickness="5"
                    MouseEnter="PersonItem_MouseEnter" MouseLeave="PersonItem_MouseLeave" MouseLeftButtonDown="PersonItem_MouseLeftButtonDown">
                    <Border.ContextMenu>
                        <ContextMenu>
                            <MenuItem Header="Edit" Command="self:CustomCommands.Edit" CommandParameter="{Binding}" CommandTarget="{Binding}"/>
                            <MenuItem Header="Delete" Command="self:CustomCommands.Delete" CommandParameter="{Binding}" CommandTarget="{Binding}"/>
                            <MenuItem Header="Add">
                                <MenuItem Header="Mother" Command="self:CustomCommands.AddMother" CommandParameter="{Binding}" CommandTarget="{Binding}"/>
                                <MenuItem Header="Father" Command="self:CustomCommands.AddFather" CommandParameter="{Binding}" CommandTarget="{Binding}"/>
                                <MenuItem Header="Sibling">
                                    <MenuItem Header="Same Parents" Command="self:CustomCommands.AddSiblingEqualParents" CommandParameter="{Binding}" CommandTarget="{Binding}"/>
                                    <MenuItem Header="Same Mother" Command="self:CustomCommands.AddSiblingByMother" CommandParameter="{Binding}" CommandTarget="{Binding}"/>
                                    <MenuItem Header="Same Father" Command="self:CustomCommands.AddSiblingByFather" CommandParameter="{Binding}" CommandTarget="{Binding}"/>
                                </MenuItem>
                                <MenuItem Header="Friend" Command="self:CustomCommands.AddFriend" CommandParameter="{Binding}" CommandTarget="{Binding}"/>
                                <MenuItem Header="Partner" Command="self:CustomCommands.AddPartner" CommandParameter="{Binding}" CommandTarget="{Binding}"/>
                                <MenuItem Header="Child" Command="self:CustomCommands.AddChild" CommandParameter="{Binding}" CommandTarget="{Binding}"/>
                                <MenuItem Header="Abuser" Command="self:CustomCommands.AddAbuser" CommandParameter="{Binding}" CommandTarget="{Binding}"/>
                                <MenuItem Header="Victim" Command="self:CustomCommands.AddVictim" CommandParameter="{Binding}" CommandTarget="{Binding}"/>
                            </MenuItem>
                            <MenuItem Header="Set">
                                <MenuItem Header="Mother" Command="self:CustomCommands.SetMother" CommandParameter="{Binding}" CommandTarget="{Binding}"/>
                                <MenuItem Header="Father" Command="self:CustomCommands.SetFather" CommandParameter="{Binding}" CommandTarget="{Binding}"/>
                                <MenuItem Header="Friend" Command="self:CustomCommands.SetFriend" CommandParameter="{Binding}" CommandTarget="{Binding}"/>
                                <MenuItem Header="Partner" Command="self:CustomCommands.SetPartner" CommandParameter="{Binding}" CommandTarget="{Binding}"/>
                                <MenuItem Header="Child" Command="self:CustomCommands.SetChild" CommandParameter="{Binding}" CommandTarget="{Binding}"/>
                                <MenuItem Header="Abuser" Command="self:CustomCommands.SetAbuser" CommandParameter="{Binding}" CommandTarget="{Binding}"/>
                                <MenuItem Header="Victim" Command="self:CustomCommands.SetVictim" CommandParameter="{Binding}" CommandTarget="{Binding}"/>
                            </MenuItem>
                        </ContextMenu>
                    </Border.ContextMenu>
                    <Viewbox Width="Auto" Height="Auto">
                        <Grid x:Name="GridMain" HorizontalAlignment="Center" VerticalAlignment="Center" Background="Transparent">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="1*" />
                                <RowDefinition Height="1*" />
                                <RowDefinition Height="1*" />
                                <RowDefinition Height="2*" />
                            </Grid.RowDefinitions>
                            <TextBlock x:Name="TextBlockFirstName" Grid.Row="1" HorizontalAlignment="Center" VerticalAlignment="Center" Text="{Binding FirstName}" Foreground="{Binding TextColor}"/>
                            <TextBlock x:Name="TextBlockLastName" Grid.Row="2" HorizontalAlignment="Center" VerticalAlignment="Center" Text="{Binding LastName}" Foreground="{Binding TextColor}"/>
                        </Grid>
                    </Viewbox>
                </Border>
            </Border>
        </DataTemplate>

        <DataTemplate x:Key="PersonItemSelected">
            <Border x:Name="BorderSelection" CornerRadius="10" BorderThickness="2" BorderBrush="LightGreen" Background="LightGreen" 
                    Width="{Binding Width}" Height="{Binding Height}">
                <Border x:Name="BorderMain"  BorderBrush="{Binding BorderBrush}"
                        Background="{Binding Background}" CornerRadius="10" BorderThickness="5"
                    MouseEnter="PersonItem_MouseEnter" MouseLeave="PersonItem_MouseLeave" MouseLeftButtonDown="PersonItem_MouseLeftButtonDown">
                    <Border.ContextMenu>
                        <ContextMenu>
                            <MenuItem Header="Edit" Command="self:CustomCommands.Edit" CommandParameter="{Binding}" CommandTarget="{Binding}"/>
                            <MenuItem Header="Delete" Command="self:CustomCommands.Delete" CommandParameter="{Binding}" CommandTarget="{Binding}"/>
                            <MenuItem Header="Add">
                                <MenuItem Header="Mother" Command="self:CustomCommands.AddMother" CommandParameter="{Binding}" CommandTarget="{Binding}"/>
                                <MenuItem Header="Father" Command="self:CustomCommands.AddFather" CommandParameter="{Binding}" CommandTarget="{Binding}"/>
                                <MenuItem Header="Sibling">
                                    <MenuItem Header="Same Parents" Command="self:CustomCommands.AddSiblingEqualParents" CommandParameter="{Binding}" CommandTarget="{Binding}"/>
                                    <MenuItem Header="Same Mother" Command="self:CustomCommands.AddSiblingByMother" CommandParameter="{Binding}" CommandTarget="{Binding}"/>
                                    <MenuItem Header="Same Father" Command="self:CustomCommands.AddSiblingByFather" CommandParameter="{Binding}" CommandTarget="{Binding}"/>
                                </MenuItem>
                                <MenuItem Header="Friend" Command="self:CustomCommands.AddFriend" CommandParameter="{Binding}" CommandTarget="{Binding}"/>
                                <MenuItem Header="Partner" Command="self:CustomCommands.AddPartner" CommandParameter="{Binding}" CommandTarget="{Binding}"/>
                                <MenuItem Header="Child" Command="self:CustomCommands.AddChild" CommandParameter="{Binding}" CommandTarget="{Binding}"/>
                                <MenuItem Header="Abuser" Command="self:CustomCommands.AddAbuser" CommandParameter="{Binding}" CommandTarget="{Binding}"/>
                                <MenuItem Header="Victim" Command="self:CustomCommands.AddVictim" CommandParameter="{Binding}" CommandTarget="{Binding}"/>
                            </MenuItem>
                            <MenuItem Header="Set">
                                <MenuItem Header="Mother" Command="self:CustomCommands.SetMother" CommandParameter="{Binding}" CommandTarget="{Binding}"/>
                                <MenuItem Header="Father" Command="self:CustomCommands.SetFather" CommandParameter="{Binding}" CommandTarget="{Binding}"/>
                                <MenuItem Header="Friend" Command="self:CustomCommands.SetFriend" CommandParameter="{Binding}" CommandTarget="{Binding}"/>
                                <MenuItem Header="Partner" Command="self:CustomCommands.SetPartner" CommandParameter="{Binding}" CommandTarget="{Binding}"/>
                                <MenuItem Header="Child" Command="self:CustomCommands.SetChild" CommandParameter="{Binding}" CommandTarget="{Binding}"/>
                                <MenuItem Header="Abuser" Command="self:CustomCommands.SetAbuser" CommandParameter="{Binding}" CommandTarget="{Binding}"/>
                                <MenuItem Header="Victim" Command="self:CustomCommands.SetVictim" CommandParameter="{Binding}" CommandTarget="{Binding}"/>
                            </MenuItem>
                        </ContextMenu>
                    </Border.ContextMenu>
                    <Viewbox Width="Auto" Height="Auto">
                        <Grid x:Name="GridMain" HorizontalAlignment="Center" VerticalAlignment="Center" Background="Transparent">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="1*" />
                                <RowDefinition Height="1*" />
                                <RowDefinition Height="1*" />
                                <RowDefinition Height="2*" />
                            </Grid.RowDefinitions>
                            <TextBlock x:Name="TextBlockFirstName" Grid.Row="1" HorizontalAlignment="Center" VerticalAlignment="Center" Text="{Binding FirstName}" Foreground="{Binding TextColor}"/>
                            <TextBlock x:Name="TextBlockLastName" Grid.Row="2" HorizontalAlignment="Center" VerticalAlignment="Center" Text="{Binding LastName}" Foreground="{Binding TextColor}"/>
                        </Grid>
                    </Viewbox>
                </Border>
            </Border>
        </DataTemplate>

        <Style TargetType="{x:Type ListBoxItem}" x:Key="PersonContainerStyle">
            <Setter Property="ContentTemplate" Value="{StaticResource PersonItem}" />
            <Setter Property="Canvas.Left" Value="{Binding X}" />
            <Setter Property="Canvas.Top" Value="{Binding Y}" />
            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
            <Style.Triggers>
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="ContentTemplate" Value="{StaticResource PersonItemSelected}" />
                    <Setter Property="FocusManager.FocusedElement" Value="{Binding RelativeSource={RelativeSource Self}}" />
                    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <DataTemplate x:Key="RelationshipItem">
            <Path Data="{Binding Path}" StrokeThickness="{Binding PathThickness}" Stroke="{Binding PathColor}" Fill="{x:Null}" MouseLeftButtonDown="RelationshipItem_MouseLeftButtonDown"/>
        </DataTemplate>

        <DataTemplate x:Key="RelationshipItemSelected">
            <Grid Background="{x:Null}">
                <Path Data="{Binding Path}" StrokeThickness="8" Stroke="LightGreen" Fill="{x:Null}"/>
                <Path Data="{Binding Path}" StrokeThickness="{Binding PathThickness}" Stroke="{Binding PathColor}" Fill="{x:Null}"/>
            </Grid>
        </DataTemplate>

        <Style TargetType="{x:Type ListBoxItem}" x:Key="RelationshipContainerStyle">
            <Style.Resources>
                <!-- Style used if item is selected and listbox has keyboard focus -->
                <Style x:Key="NoFocusVisualStyle" TargetType="Control">
                    <Setter Property="BorderBrush" Value="{x:Null}" />
                    <Setter Property="Background" Value="{x:Null}"/>
                </Style>
                <!-- Apply this style -->
                <Style x:Key="{x:Type ListBoxItem}" TargetType="ListBoxItem">
                    <Setter Property="FocusVisualStyle" Value="{StaticResource NoFocusVisualStyle}" />
                    <Setter Property="BorderBrush" Value="{x:Null}" />
                    <Setter Property="Background" Value="{x:Null}"/>
                </Style>
                <!-- Color used if item is selected and listbox has focus -->
                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="Transparent"/>
                <!-- Color used if item is selected and listbox does not have focus -->
                <SolidColorBrush  x:Key="{x:Static SystemColors.ControlBrushKey}" Color="Transparent"/>
                <!-- Font color used if item is selected and listbox has focus -->
                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="Black" />

            </Style.Resources>
            <Setter Property="Background" Value="{x:Null}"/>
            <Setter Property="BorderBrush" Value="{x:Null}" />
            <Setter Property="ContentTemplate" Value="{StaticResource RelationshipItem}" />
            <!--<Setter Property="FocusVisualStyle" Value="{x:Null}" />-->
            <Setter Property="FocusVisualStyle" Value="{StaticResource NoFocusVisualStyle}" />
            <Style.Triggers>
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Background" Value="{x:Null}"/>
                    <Setter Property="BorderBrush" Value="{x:Null}" />
                    <Setter Property="ContentTemplate" Value="{StaticResource RelationshipItemSelected}" />
                    <Setter Property="FocusManager.FocusedElement" Value="{Binding RelativeSource={RelativeSource Self}}" />
                    <!--<Setter Property="FocusVisualStyle" Value="{x:Null}" />-->
                    <Setter Property="FocusVisualStyle" Value="{StaticResource NoFocusVisualStyle}" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <converters:IsItemSelected x:Key="IsItemSelected"/>
        <converters:IsItemVisible x:Key="IsItemVisible"/>

    </Window.Resources>

    <Window.CommandBindings>
        <CommandBinding Command="self:CustomCommands.Save" CanExecute="Save_CanExecute" Executed="Save_Executed"/>
        <CommandBinding Command="self:CustomCommands.Open" CanExecute="Open_CanExecute" Executed="Open_Executed"/>
        <CommandBinding Command="self:CustomCommands.Print" CanExecute="Print_CanExecute" Executed="Print_Executed"/>
        <CommandBinding Command="self:CustomCommands.PrintView" CanExecute="PrintView_CanExecute" Executed="PrintView_Executed"/>
        <CommandBinding Command="self:CustomCommands.CenterTree" CanExecute="CenterTree_CanExecute" Executed="CenterTree_Executed"/>
        <CommandBinding Command="self:CustomCommands.Edit" />
        <CommandBinding Command="self:CustomCommands.Delete" />
        <CommandBinding Command="self:CustomCommands.AddMother" CanExecute="AddMother_CanExecute" Executed="AddMother_Executed" />
        <CommandBinding Command="self:CustomCommands.AddFather" CanExecute="AddFather_CanExecute" Executed="AddFather_Executed"/>
        <CommandBinding Command="self:CustomCommands.AddSiblingEqualParents" CanExecute="AddSiblingEqualParents_CanExecute" Executed="AddSiblingEqualParents_Executed"/>
        <CommandBinding Command="self:CustomCommands.AddSiblingByMother" CanExecute="AddSiblingByMother_CanExecute" Executed="AddSiblingByMother_Executed"/>
        <CommandBinding Command="self:CustomCommands.AddSiblingByFather" CanExecute="AddSiblingByFather_CanExecute" Executed="AddSiblingByFather_Executed"/>
        <CommandBinding Command="self:CustomCommands.AddFriend" CanExecute="AddFriend_CanExecute" Executed="AddFriend_Executed"/>
        <CommandBinding Command="self:CustomCommands.AddPartner" CanExecute="AddPartner_CanExecute" Executed="AddPartner_Executed"/>
        <CommandBinding Command="self:CustomCommands.AddChild" CanExecute="AddChild_CanExecute" Executed="AddChild_Executed"/>
        <CommandBinding Command="self:CustomCommands.AddAbuser" CanExecute="AddAbuser_CanExecute" Executed="AddAbuser_Executed"/>
        <CommandBinding Command="self:CustomCommands.AddVictim" CanExecute="AddVictim_CanExecute" Executed="AddVictim_Executed"/>
        <CommandBinding Command="self:CustomCommands.SetMother" CanExecute="SetMother_CanExecute" Executed="SetMother_Executed"/>
        <CommandBinding Command="self:CustomCommands.SetFather" CanExecute="SetFather_CanExecute" Executed="SetFather_Executed"/>
        <CommandBinding Command="self:CustomCommands.SetFriend" CanExecute="SetFriend_CanExecute" Executed="SetFriend_Executed"/>
        <CommandBinding Command="self:CustomCommands.SetPartner" CanExecute="SetPartner_CanExecute" Executed="SetPartner_Executed"/>
        <CommandBinding Command="self:CustomCommands.SetChild" CanExecute="SetChild_CanExecute" Executed="SetChild_Executed"/>
        <CommandBinding Command="self:CustomCommands.SetAbuser" CanExecute="SetAbuser_CanExecute" Executed="SetAbuser_Executed"/>
        <CommandBinding Command="self:CustomCommands.SetVictim" CanExecute="SetVictim_CanExecute" Executed="SetVictim_Executed"/>
    </Window.CommandBindings>

    <Grid>

        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <Menu
            x:Name="MainMenu" Grid.Row="0">
            <MenuItem Header="_File">
                <MenuItem Header="_New" />
                <MenuItem Header="_Open" Command="self:CustomCommands.Open"/>
                <MenuItem Header="_Save" Command="self:CustomCommands.Save"/>
                <Separator />
                <MenuItem Header="_Print" Command="self:CustomCommands.Print" />
                <MenuItem Header="_Print View" Command="self:CustomCommands.PrintView" />
            </MenuItem>
            <MenuItem Header="_Edit">
                <MenuItem Header="_Undo" />
                <MenuItem Header="_Redo" />
            </MenuItem>
            <MenuItem Header="_View">
                <MenuItem Header="_Zoom" />
            </MenuItem>
            <MenuItem Header="_About" Click="ShowAboutWindow">
            </MenuItem>
        </Menu>

        <Grid x:Name="MainGrid" Grid.Row="1">

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="400"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>

            <Grid x:Name="DataGrid" Grid.Column="0" Background="Azure">

                <Grid.RowDefinitions>
                    <RowDefinition Height="6*"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="5*"/>
                </Grid.RowDefinitions>

                <Grid x:Name="PersonDataGrid" Grid.Row="0" Background="Azure" DataContext="{Binding ElementName=PersonListBox, Path=SelectedItem}"
                  Visibility="{Binding ElementName=PersonListBox, Path=SelectedItem, Converter={StaticResource IsItemSelected}}"
                  HorizontalAlignment="Center">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="300"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <Border Grid.Column="0" Grid.Row="0" Grid.ColumnSpan="2" CornerRadius="5" BorderThickness="1"
                        BorderBrush="{Binding BorderBrush}" Background="{Binding Background}" Margin="4,20,4,4">
                        <TextBlock Margin="4" Text="{Binding FirstName}" FontSize="20" Foreground="{Binding ColorText}" HorizontalAlignment="Center"/>
                    </Border>
                    <Border Grid.Column="0" Grid.Row="1" Grid.ColumnSpan="2" CornerRadius="5" BorderThickness="1"
                        BorderBrush="{Binding BorderBrush}" Background="White" Margin="4,10,4,4" >
                        <StackPanel>
                            <Label Margin="4" Content="First Name: " />
                            <TextBox Margin="4" Text="{Binding FirstName}" AcceptsReturn="False"/>
                            <Label Margin="4" Content="Last Name: " />
                            <TextBox Margin="4" Text="{Binding LastName}" AcceptsReturn="False"/>
                            <StackPanel Margin="4" Orientation="Horizontal">
                                <Label Margin="4" Content="Gender: " />
                                <ComboBox Margin="4" SelectedItem="{Binding Gender, Mode=TwoWay}" ItemsSource="{Binding Source={x:Static self:PersonSettings.GenderList}}"/>
                            </StackPanel>
                            <StackPanel Margin="4" Orientation="Horizontal">
                                <Label Margin="4" Content="Birthdate: " />
                                <DatePicker Margin="4" SelectedDate="{Binding DOB}"/>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal">
                                <Label Margin="4" Content="Mother:" />
                                <Label Margin="4"  DataContext="{Binding MotherRelationship}" Content="{Binding Reciprocal}" MouseLeftButtonDown="RelationshipItem_MouseLeftButtonDown"/>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal">
                                <Label Margin="4" Content="Father:" />
                                <Label Margin="4"  DataContext="{Binding FatherRelationship}" Content="{Binding Reciprocal}" MouseLeftButtonDown="RelationshipItem_MouseLeftButtonDown"/>
                            </StackPanel>
                            <StackPanel Margin="4">
                                <Label Margin="4" Content="Siblings:" />
                                <ItemsControl ItemsSource="{Binding SiblingRelationships}">
                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate>
                                            <Label Margin="2"  Content="{Binding Reciprocal}" MouseLeftButtonDown="RelationshipItem_MouseLeftButtonDown"/>
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                </ItemsControl>
                            </StackPanel>
                            <StackPanel Margin="4">
                                <Label Margin="4" Content="Friends:" />
                                <ItemsControl ItemsSource="{Binding FriendRelationships}">
                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate>
                                            <Label Margin="2"  Content="{Binding Reciprocal}" MouseLeftButtonDown="RelationshipItem_MouseLeftButtonDown"/>
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                </ItemsControl>
                            </StackPanel>
                            <StackPanel Margin="4">
                                <Label Margin="4" Content="Partners:" />
                                <ItemsControl ItemsSource="{Binding PartnerRelationships}">
                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate>
                                            <Label Margin="2"  Content="{Binding Reciprocal}" MouseLeftButtonDown="RelationshipItem_MouseLeftButtonDown"/>
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                </ItemsControl>
                            </StackPanel>
                            <StackPanel Margin="4">
                                <Label Margin="4" Content="Children:" />
                                <ItemsControl ItemsSource="{Binding ChildRelationships}">
                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate>
                                            <Label Margin="2"  Content="{Binding Reciprocal}" MouseLeftButtonDown="RelationshipItem_MouseLeftButtonDown"/>
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                </ItemsControl>
                            </StackPanel>
                            <StackPanel Margin="4">
                                <Label Margin="4" Content="Abusers:" />
                                <ItemsControl ItemsSource="{Binding AbuserRelationships}">
                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate>
                                            <Label Margin="2"  Content="{Binding Reciprocal}" MouseLeftButtonDown="RelationshipItem_MouseLeftButtonDown"/>
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                </ItemsControl>
                            </StackPanel>
                            <StackPanel Margin="4">
                                <Label Margin="4" Content="Victims:" />
                                <ItemsControl ItemsSource="{Binding VictimRelationships}">
                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate>
                                            <Label Margin="2"  Content="{Binding Reciprocal}" MouseLeftButtonDown="RelationshipItem_MouseLeftButtonDown"/>
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                </ItemsControl>
                            </StackPanel>
                        </StackPanel>
                    </Border>

                </Grid>

                <GridSplitter Grid.Row="1" ResizeBehavior="PreviousAndNext" Height="7" Background="#FFBCBCBC" HorizontalAlignment="Stretch"/>

                <Grid x:Name="RelationshipDataGrid" Grid.Row="2" Background="Azure" DataContext="{Binding SelectedRelationship}"
                  Visibility="{Binding Converter={StaticResource IsItemSelected}}"
                  HorizontalAlignment="Center">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="300"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <Border Grid.Column="0" Grid.Row="0" Grid.ColumnSpan="2" CornerRadius="5" BorderThickness="3"
                        BorderBrush="{Binding PathColor}" Background="White" Margin="4,20,4,4">
                        <TextBlock Text="{Binding Description}" FontSize="20" Foreground="Black" HorizontalAlignment="Center"/>
                    </Border>
                    <Border Grid.Column="0" Grid.Row="1" Grid.ColumnSpan="2" CornerRadius="5" BorderThickness="1"
                        BorderBrush="Gray" Background="White" Margin="4,10,4,4" >
                        <StackPanel>
                            <Label Margin="4" Content="{Binding SourceDescription}" />
                            <Label Margin="4" Content="{Binding DestinationDescription}" />
                            <StackPanel Margin="4" Orientation="Horizontal" Visibility="{Binding StartDateVisible, Converter={StaticResource IsItemVisible}}">
                                <Label Margin="4" Content="{Binding StartDateDescription}"/>
                                <DatePicker Margin="4" SelectedDate="{Binding StartDate}"/>
                            </StackPanel>
                            <StackPanel Margin="4" Orientation="Horizontal"  Visibility="{Binding EndDateVisible, Converter={StaticResource IsItemVisible}}">
                                <CheckBox Margin="4" IsChecked="{Binding Ended}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                <Label Margin="4" Content="{Binding EndDateDescription}" />
                                <DatePicker Margin="4" SelectedDate="{Binding EndDate}" Visibility="{Binding Ended, Converter={StaticResource IsItemVisible}}"/>
                            </StackPanel>
                            <Label Margin="4" Content="Notes:" />
                            <TextBox Margin="4" Text="{Binding Notes}" AcceptsReturn="True"/>
                        </StackPanel>
                    </Border>
                </Grid>

            </Grid>

            <GridSplitter Grid.Column="1" ResizeBehavior="PreviousAndNext" Width="7" Background="#FFBCBCBC"/>

            <ScrollViewer x:Name="TreeScrollViewer" Grid.Column="2" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto"
                          MouseMove="TreeScrollViewer_MouseMove" >
                <Border x:Name="TreeZoomBorder" ClipToBounds="False" Background="White" MouseLeftButtonDown="TreeZoomBorder_MouseLeftButtonDown">
                    <Canvas Width="{Binding Tree.Width}" Height="{Binding Tree.Height}" >

                        <ItemsControl Width="{Binding Tree.Width}" Height="{Binding Tree.Height}"
                                      ItemsSource="{Binding Relationships}"
                                      Cursor="{Binding FamilyTreeCursor}" ItemTemplate="{StaticResource RelationshipItem}" >
                            <ItemsControl.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <Canvas x:Name="RelationshipCanvas" IsItemsHost="True" Background="{x:Null}"/>
                                </ItemsPanelTemplate>
                            </ItemsControl.ItemsPanel>
                        </ItemsControl>
                        <ListBox x:Name="PersonListBox" Style="{StaticResource PersonListBoxStyle}" BorderBrush="Black" Background="{x:Null}"                               
                         Width="{Binding Tree.Width}" Height="{Binding Tree.Height}"                         
                         ItemsSource="{Binding Members}" ItemContainerStyle="{StaticResource PersonContainerStyle}"                              
                         Cursor="{Binding FamilyTreeCursor}" SelectionMode="Single">
                            <ListBox.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <Canvas x:Name="PersonListBoxCanvas" IsItemsHost="True" Background="{x:Null}"/>
                                </ItemsPanelTemplate>
                            </ListBox.ItemsPanel>

                        </ListBox>





                    </Canvas>
                </Border>
            </ScrollViewer>

            <Popup x:Name="SetCommandPopup" Grid.Column="2" IsOpen="{Binding SetCommandInProgress}" AllowsTransparency="true" Placement="Relative" PlacementTarget="{Binding ElementName=TreeScrollViewer}" >
                <Border CornerRadius="4" Padding="1" Background="Gainsboro" BorderThickness="1" BorderBrush="DimGray">
                    <TextBlock x:Name="ToolTipTextBox" Text="{Binding SetCommandInProgressDescription}" Background="Azure"/>
                </Border>
            </Popup>

        </Grid>

    </Grid>

</Window>
